#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–µ—à–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
–ü–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–µ—à–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
"""

import os
import sys
import argparse
import pickle
import time
from dotenv import load_dotenv
from vector_db import VectorDatabase

def show_cache_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞"""
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    print("=" * 40)
    
    try:
        vector_db = VectorDatabase()
        stats = vector_db.get_cache_stats()
        
        print(f"–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ: {'‚úÖ' if stats['cache_enabled'] else '‚ùå'}")
        
        if stats['cache_enabled']:
            print(f"–§–∞–π–ª–æ–≤ –≤ –∫–µ—à–µ: {stats['cache_files']}")
            print(f"–†–∞–∑–º–µ—Ä –∫–µ—à–∞: {stats['cache_size_mb']:.2f} MB")
            print(f"–í—Ä–µ–º—è –∂–∏–∑–Ω–∏: {stats['cache_ttl_hours']:.1f} —á–∞—Å–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
            cache_dir = os.getenv('CACHE_DIR', './embeddings_cache')
            if os.path.exists(cache_dir):
                print(f"\n–ü–∞–ø–∫–∞ –∫–µ—à–∞: {cache_dir}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–µ—à —Ñ–∞–π–ª—ã
                provider_stats = {}
                for filename in os.listdir(cache_dir):
                    if filename.endswith('.pkl'):
                        filepath = os.path.join(cache_dir, filename)
                        try:
                            with open(filepath, 'rb') as f:
                                data = pickle.load(f)
                                provider = data.get('provider', 'unknown')
                                model = data.get('model', 'unknown')
                                key = f"{provider}:{model}"
                                
                                if key not in provider_stats:
                                    provider_stats[key] = 0
                                provider_stats[key] += 1
                        except:
                            continue
                
                if provider_stats:
                    print("\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:")
                    for key, count in provider_stats.items():
                        print(f"  {key}: {count} —Ñ–∞–π–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def clear_cache():
    """–û—á–∏—â–∞–µ—Ç –∫–µ—à"""
    print("üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤...")
    
    try:
        vector_db = VectorDatabase()
        vector_db.clear_cache()
        print("‚úÖ –ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}")

def cleanup_old_cache():
    """–£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Ñ–∞–π–ª—ã –∫–µ—à–∞"""
    print("üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∫–µ—à–∞...")
    
    try:
        cache_dir = os.getenv('CACHE_DIR', './embeddings_cache')
        cache_ttl = int(os.getenv('CACHE_TTL', '86400'))
        
        if not os.path.exists(cache_dir):
            print("–ü–∞–ø–∫–∞ –∫–µ—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        current_time = time.time()
        removed_count = 0
        
        for filename in os.listdir(cache_dir):
            if filename.endswith('.pkl'):
                filepath = os.path.join(cache_dir, filename)
                file_age = current_time - os.path.getmtime(filepath)
                
                if file_age > cache_ttl:
                    os.remove(filepath)
                    removed_count += 1
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {removed_count} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}")

def migrate_cache(old_provider, new_provider):
    """–ü–æ–º–æ–≥–∞–µ—Ç –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–µ—à –ø—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    print(f"üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –∫–µ—à–∞ —Å {old_provider} –Ω–∞ {new_provider}")
    
    try:
        cache_dir = os.getenv('CACHE_DIR', './embeddings_cache')
        
        if not os.path.exists(cache_dir):
            print("–ü–∞–ø–∫–∞ –∫–µ—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞
        old_cache_dir = f"{cache_dir}_backup_{old_provider}_{int(time.time())}"
        os.makedirs(old_cache_dir, exist_ok=True)
        
        moved_count = 0
        
        for filename in os.listdir(cache_dir):
            if filename.endswith('.pkl'):
                filepath = os.path.join(cache_dir, filename)
                try:
                    with open(filepath, 'rb') as f:
                        data = pickle.load(f)
                        if data.get('provider') == old_provider:
                            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ø–∞–ø–∫—É
                            old_filepath = os.path.join(old_cache_dir, filename)
                            os.rename(filepath, old_filepath)
                            moved_count += 1
                except:
                    continue
        
        print(f"‚úÖ –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {moved_count} —Ñ–∞–π–ª–æ–≤ –≤ {old_cache_dir}")
        print(f"   –ù–æ–≤—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º {new_provider}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–µ—à–∞: {e}")

def main():
    load_dotenv()
    
    parser = argparse.ArgumentParser(description="–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–µ—à–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
    parser.add_argument('action', choices=['stats', 'clear', 'cleanup', 'migrate'], 
                       help='–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    parser.add_argument('--old-provider', help='–°—Ç–∞—Ä—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏')
    parser.add_argument('--new-provider', help='–ù–æ–≤—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    if args.action == 'stats':
        show_cache_stats()
    elif args.action == 'clear':
        clear_cache()
    elif args.action == 'cleanup':
        cleanup_old_cache()
    elif args.action == 'migrate':
        if not args.old_provider or not args.new_provider:
            print("‚ùå –î–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å --old-provider –∏ --new-provider")
            sys.exit(1)
        migrate_cache(args.old_provider, args.new_provider)

if __name__ == "__main__":
    main()